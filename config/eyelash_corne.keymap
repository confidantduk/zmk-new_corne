#define ZMK_POINTING_DEFAULT_MOVE_VAL 1200  // 600
#define ZMK_POINTING_DEFAULT_SCRL_VAL 25   // 10

#include <input/processors.dtsi>
#include <zephyr/dt-bindings/input/input-event-codes.h>
#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/ext_power.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/pointing.h>
#include <dt-bindings/zmk/rgb.h>

&mmv_input_listener { input-processors = <&zip_xy_scaler 2 1>; };

&msc_input_listener { input-processors = <&zip_scroll_scaler 2 1>; };

&msc {
    acceleration-exponent = <1>;      // 0
    time-to-max-speed-ms = <100>;       // 300
    delay-ms = <0>;                   // 0
};

&mmv {
    time-to-max-speed-ms = <500>;
    acceleration-exponent = <1>;
    trigger-period-ms = <16>;
};

/ {
    behaviors {
        td0: td0 {
            compatible = "zmk,behavior-tap-dance";
            display-name = "Shift/Caps Lock Tap Dance";
            #binding-cells = <0>;
            bindings = <&kp LEFT_SHIFT>, <&kp CAPS>;
        };
    };

    rgb_encoder: rgb_encoder {
        compatible = "zmk,behavior-sensor-rotate";
        #sensor-binding-cells = <0>;
        bindings = <&rgb_ug RGB_BRI>, <&rgb_ug RGB_BRD>;
    };

    scroll_encoder: scroll_encoder {
        compatible = "zmk,behavior-sensor-rotate";
        #sensor-binding-cells = <0>;
        bindings = <&msc SCRL_DOWN>, <&msc SCRL_UP>;

        tap-ms = <100>;
    };

    keymap {
        compatible = "zmk,keymap";

        default_layer {
            display-name = "QWERTY";
            bindings = <
&kp ESCAPE      &kp Q  &kp W  &kp E      &kp R  &kp T                                    &msc SCRL_UP                     &kp Y      &kp U  &kp I         &kp O    &kp P     &kp BSPC
&kp TAB         &kp A  &kp S  &kp D      &kp F  &kp G                    &msc SCRL_LEFT  &kp HOME        &msc SCRL_RIGHT  &kp H      &kp J  &kp K         &kp L    &kp SEMI  &kp SQT
&kp LEFT_SHIFT  &kp Z  &kp X  &kp C      &kp V  &kp B      &kp C_MUTE                    &msc SCRL_DOWN                   &kp N      &kp M  &kp COMMA     &kp DOT  &kp FSLH  &kp RIGHT_SHIFT
                              &kp LCTRL  &mo 1  &kp SPACE                                                                 &kp ENTER  &mo 2  &kp LEFT_GUI
            >;

            sensor-bindings = <&inc_dec_kp C_VOLUME_UP C_VOLUME_DOWN>;
        };

        numAndSym {
            display-name = "NUMBER";
            bindings = <
&kp GRAVE       &kp NUMBER_1  &kp NUMBER_2  &kp NUMBER_3  &kp NUMBER_4   &kp N5                    &trans          &kp MINUS  &kp PLUS   &kp LEFT_BRACKET    &kp RIGHT_BRACKET  &kp BACKSLASH  &trans
&kp TAB         &kp NUMBER_6  &kp NUMBER_7  &kp N8        &kp N9         &kp N0            &trans  &trans  &trans  &kp UNDER  &kp EQUAL  &kp LEFT_BRACE      &kp RIGHT_BRACE    &kp PIPE       &trans
&kp LEFT_SHIFT  &mo 5         &kp LEFT_WIN  &kp LEFT_ALT  &kp LG(LS(S))  &mo 4   &trans            &trans          &trans     &trans     &trans              &trans             &trans         &trans
                                            &trans        &trans         &mo 2                                     &trans     &mo 3      &kp K_CONTEXT_MENU
            >;

            sensor-bindings = <&scroll_encoder>;
        };

        funcAndArrow {
            display-name = "SYMBOL";
            bindings = <
&trans  &kp F1   &kp F2   &kp F3  &kp F4  &kp F5                     &trans          &trans  &kp C_PREVIOUS  &kp UP_ARROW    &kp C_NEXT  &trans  &kp DELETE
&trans  &kp F6   &kp F7   &kp F8  &kp F9  &kp F10            &trans  &trans  &trans  &trans  &kp LEFT        &kp DOWN_ARROW  &kp RIGHT   &trans  &trans
&trans  &kp F11  &kp F12  &trans  &trans  &trans   &trans            &trans          &trans  &trans          &trans          &trans      &trans  &trans
                          &trans  &trans  &trans                                     &trans  &trans          &trans
            >;

            sensor-bindings = <&scroll_encoder>;
        };

        rgbAndBt {
            display-name = "Fn";
            bindings = <
&rgb_ug RGB_TOG  &rgb_ug RGB_HUI  &rgb_ug RGB_HUD  &rgb_ug RGB_SPI  &rgb_ug RGB_SPD  &trans                    &trans          &trans        &trans        &trans        &trans        &ext_power EP_OFF  &kp C_SLEEP_MODE
&rgb_ug RGB_EFF  &rgb_ug RGB_SAI  &rgb_ug RGB_SAD  &trans           &trans           &trans            &trans  &trans  &trans  &trans        &trans        &trans        &trans        &trans             &kp C_POWER
&rgb_ug RGB_EFR  &rgb_ug RGB_BRI  &rgb_ug RGB_BRD  &trans           &trans           &trans  &trans            &trans          &bt BT_SEL 0  &bt BT_SEL 1  &bt BT_SEL 2  &bt BT_SEL 3  &bt BT_SEL 4       &trans
                                                   &trans           &trans           &trans                                    &trans        &trans        &bt BT_CLR
            >;

            sensor-bindings = <&scroll_encoder>;
        };

        reversedsides {
            bindings = <
&kp BACKSPACE   &kp Y  &kp U  &kp I      &kp O   &kp P                     &trans          &trans  &trans  &trans  &trans  &trans  &trans
&kp DELETE      &kp H  &kp J  &kp K      &kp L   &trans            &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans
&kp LEFT_SHIFT  &kp N  &kp M  &kp ENTER  &trans  &trans  &trans            &trans          &trans  &trans  &trans  &trans  &trans  &trans
                              &trans     &trans  &trans                                    &trans  &trans  &trans
            >;
        };

        LHS_mouse {
            bindings = <
&trans  &trans  &trans          &mkp MB3        &trans           &trans                    &trans          &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &mkp LCLK       &mmv MOVE_UP    &mkp RCLK        &trans            &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &mmv MOVE_LEFT  &mmv MOVE_DOWN  &mmv MOVE_RIGHT  &trans  &trans            &trans          &trans  &trans  &trans  &trans  &trans  &trans
                                &trans          &trans           &trans                                    &trans  &trans  &trans
            >;
        };
    };
};
